 // This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Put you code here:
    // processing x
    Mux16 (a=x, b=false, sel=zx, out=zxout); //maybeZeroedX  = zxout
    Not16 (in=zxout, out=notzxout); //negX = notzxout
    Mux16 (a=zxout, b=notzxout, sel=nx, out=nxout); //transformedX = nxout
    
    // processing y
    Mux16 (a=y, b=false, sel=zy, out=zyout); //maybeZeroedY = zyout
    Not16 (in=zyout, out=notzyout); //negY = notzyout
    Mux16 (a=zyout, b=notzyout, sel=ny, out=nyout); //transformedY = nyout

    // sum and addition of x and y for f input
    Add16 (a=nxout, b=nyout, out=xplusy); //sum = xplusy
    And16 (a=nxout, b=nyout, out=xandy); //and = xandy

    // getting fout and its negation
    Mux16 (a=xandy, b=xplusy, sel=f, out=fout); //output = fout
    
    Not16 (in=fout, out=notfout); //negatedOutput = notfout

    // processing no and finding ng from lsb of out, breaking 16 bits into 2 8 bit pieces
    Mux16 (a=fout, b=notfout, sel=no,  out=out, out[15]=ng, out[0..7]=first8bits, out[8..15]=second8bits);

    Or8Way (in=first8bits, out=first8bitsOr);
    Or8Way (in=second8bits, out=second8bitsOr);
    Or (a=first8bitsOr, b=second8bitsOr, out=fullor);
    Not (in=fullor, out=zr);
}